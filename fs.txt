Assignment 1: Assignment on JavaScript

1) Write a program to create an array with const and another array with let. Change the values in the array created with let and explain why you cannot change the array created with const. 
// 1) Array with const and let
    const constArrayInput = prompt("Enter 3 numbers for const array (comma-separated):");
    const constArray = constArrayInput.split(",").map(Number);

    const letArrayInput = prompt("Enter 3 numbers for let array (comma-separated):");
    let letArray = letArrayInput.split(",").map(Number);

    console.log("Const Array (initial):", constArray);
    console.log("Let Array (initial):", letArray);

    // Modify let array
    const newLetValue = parseInt(prompt("Enter a number to replace first element in let array:"));
    letArray[0] = newLetValue;

    const pushLetValue = parseInt(prompt("Enter a number to add to let array:"));
    letArray.push(pushLetValue);

    console.log("Let Array (modified):", letArray);

    // Modify const array (only element, not entire array)
    const newConstValue = parseInt(prompt("Enter a number to replace first element in const array:"));
    constArray[0] = newConstValue;

    console.log("Const Array (modified element):", constArray);
    console.log("Note: You can't reassign constArray, but you can modify its elements.");

2) Create a small arrow function that takes two numbers and adds them together. 
// 2) Arrow function for addition
    const num1 = parseFloat(prompt("Enter first number to add:"));
    const num2 = parseFloat(prompt("Enter second number to add:"));
    const add = (a, b) => a + b;
    console.log(`Sum of ${num1} and ${num2} is: ${add(num1, num2)}`);

3) Use template literals to create a sentence like "My name is [name], I am [age] years old." Use variables to store name and age. 
// 3) Template literals
    const userName = prompt("Enter your name:");
    const userAge = prompt("Enter your age:");
    const sentence = `My name is ${userName}, I am ${userAge} years old.`;
    console.log(sentence);

4) Given an object person = { name: 'John', age: 30 }, use destructuring to get name and age from the object into separate variables. 
// 4) Object destructuring
    const pName = prompt("Enter person's name:");
    const pAge = prompt("Enter person's age:");
    const person = { name: pName, age: pAge };
    const { name, age } = person;
    console.log(`Destructured values -> Name: ${name}, Age: ${age}`);

5) Use the spread syntax to join two arrays of numbers into one bigger array. 
// 5) Spread syntax
    const arr1 = prompt("Enter first array of numbers (comma-separated):").split(",").map(Number);
    const arr2 = prompt("Enter second array of numbers (comma-separated):").split(",").map(Number);
    const mergedArray = [...arr1, ...arr2];
    console.log("Combined Array using spread syntax:", mergedArray);

6) Create a Car class with make, model, and year as properties. Add a function inside the class to show the car's details. 
// 6) Car class
    class Car {
      constructor(make, model, year) {
        this.make = make;
        this.model = model;
        this.year = year;
      }

      showDetails() {
        console.log(`Car Details: ${this.make} ${this.model}, Year: ${this.year}`);
      }
    }

    const carMake = prompt("Enter car make:");
    const carModel = prompt("Enter car model:");
    const carYear = prompt("Enter car year:");
    const myCar = new Car(carMake, carModel, carYear);
    myCar.showDetails();

7) Use a symbol to make a unique id property in an object and try to use it.
// 7) Symbol as unique ID
    const uniqueId = Symbol("id");
    const uidValue = prompt("Enter a unique ID value:");
    const user = {
      name: prompt("Enter a user name:"),
      [uniqueId]: uidValue
    };

    console.log("User Object with Symbol:", user);
    console.log("Access Symbol ID:", user[uniqueId]);

Assignment 2: Assignment on Asynchronous JavaScript 
1) Write a function that takes two numbers and returns their sum, ensuring the function is a pure function (i.e., no side effects). 
   // 1) Pure function to add two numbers
    function add(a, b) {
      return a + b;
    }
    const num1 = parseFloat(prompt("Enter first number to add:"));
    const num2 = parseFloat(prompt("Enter second number to add:"));
    console.log("1) Sum:", add(num1, num2));

2) Create a higher-order function that takes a function and an array as inputs, and applies the function to each element of the array. 
// 2) Higher-order function: apply a function to each element of array
    function applyFunction(fn, array) {
      return array.map(fn);
    }
    const arrayInput = prompt("2) Enter comma-separated numbers for array:");
    const array = arrayInput.split(",").map(Number);
    const operation = prompt("Enter operation: double / square");
    let func;
    if (operation === "double") {
      func = x => x * 2;
    } else {
      func = x => x * x;
    }
    console.log(`2) Result of applying ${operation}:`, applyFunction(func, array));

3) Write a curried function that multiplies three numbers. The function should be curried such that you can call it one number at a time. 
// 3) Curried function to multiply 3 numbers
    function multiply(a) {
      return function(b) {
        return function(c) {
          return a * b * c;
        };
      };
    }
    const m1 = parseFloat(prompt("3) Enter first number for multiplication:"));
    const m2 = parseFloat(prompt("Enter second number:"));
    const m3 = parseFloat(prompt("Enter third number:"));
    console.log("3) Curried Multiply Result:", multiply(m1)(m2)(m3));

4) Create a function that takes an array and an element and returns a new array with the element added, ensuring the original array is not mutated. 
// 4) Add element to array (without mutating original)
    function addToArray(arr, element) {
      return [...arr, element];
    }
    const baseArray = prompt("4) Enter original array (comma-separated):").split(",").map(Number);
    const newElement = parseFloat(prompt("Enter element to add to array:"));
    const updatedArray = addToArray(baseArray, newElement);
    console.log("4) New Array:", updatedArray);
    console.log("   Original Array remains unchanged:", baseArray);

5) Write a function that returns a promise that resolves with a string "Success" after 1 second. 
// 5) Promise that resolves after 1 second
    function delayedSuccess() {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve("Success");
        }, 1000);
      });
    }
    delayedSuccess().then((res) => console.log("5)", res));

6) Create an asynchronous function that fetches data from a mock API (simulated using setTimeout), and logs the result once it's fetched. 
// 6) Simulated API call with setTimeout
    function fetchMockData() {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve({ status: 200, data: "Mock API Response" });
        }, 1500);
      });
    }
    async function getData() {
      const data = await fetchMockData();
      console.log("6) Fetched Data:", data);
    }
    getData();

7) Write a function that takes a number and a callback function, applies the callback to the number, and returns the result. 
// 7) Function that takes number and callback
    function applyCallback(num, cb) {
      return cb(num);
    }
    const n = parseFloat(prompt("7) Enter number for callback:"));
    const cbType = prompt("Choose callback: square / cube");
    let callbackFunc = cbType === "cube" ? x => x * x * x : x => x * x;
    console.log(`7) ${cbType} result:`, applyCallback(n, callbackFunc));

8) Write a generator function that yields the first 3 numbers of the Fibonacci sequence. 
// 8) Fibonacci generator (first 3)
    function* fibonacci() {
      let a = 0, b = 1;
      yield a;
      yield b;
      yield a + b;
    }
    const fib = fibonacci();
    console.log("8) Fibonacci:");
    console.log(fib.next().value);
    console.log(fib.next().value);
    console.log(fib.next().value);

9) Create a Car class with properties make, model, and year, and a method displayInfo() that returns the car's information. 
// 9) Car class with displayInfo()
    class Car {
      constructor(make, model, year) {
        this.make = make;
        this.model = model;
        this.year = year;
      }
      displayInfo() {
        return `Car: ${this.make} ${this.model}, Year: ${this.year}`;
      }
    }
    const make = prompt("9) Enter car make:");
    const model = prompt("Enter car model:");
    const year = prompt("Enter car year:");
    const car = new Car(make, model, year);
    console.log("9)", car.displayInfo());

10) Create a Shape class with a method area(), and extend it into a Rectangle class that overrides the area() method to calculate the area of a rectangle.
// 10) Shape and Rectangle class with area()
    class Shape {
      area() {
        return 0;
      }
    }
    class Rectangle extends Shape {
      constructor(width, height) {
        super();
        this.width = width;
        this.height = height;
      }

      area() {
        return this.width * this.height;
      }
    }
    const width = parseFloat(prompt("10) Enter width of rectangle:"));
    const height = parseFloat(prompt("Enter height of rectangle:"));
    const rect = new Rectangle(width, height);
    console.log("10) Rectangle Area:", rect.area());

Assignment 3: Assignment on Typescript.

 1) Write a TypeScript program that declares a variable `name` and assigns it a string value. Also declare a variable `age` and assign it a number value. Finally print the values of name and age. 
// 1) Declare and print name and age
let name: string = "Tejas";
let age: number = 23;
console.log("1) Name:", name);
console.log("   Age:", age);
2) Write a TypeScript program that declares variables using let, const, and var. Then, describe how each declaration type behaves with respect to scoping and mutability. 
// 2) let, const, var: Scoping and Mutability
let a = 10;       // Block scoped, mutable
const b = 20;     // Block scoped, immutable
var c = 30;       // Function scoped, mutable

{
  let a = 100;
  var c = 300;
  console.log("2) Inside block - let a:", a); // 100
}
console.log("   Outside block - let a:", a);  // 10
console.log("   Outside block - var c:", c);  // 300
console.log("   const b:", b);                // 20

3) Write a TypeScript function that takes an array of numbers and returns only the even numbers. 
// 3) Function to return even numbers
function getEvenNumbers(numbers: number[]): number[] {
  return numbers.filter(num => num % 2 === 0);
}
console.log("3) Even Numbers:", getEvenNumbers([1, 2, 3, 4, 5, 6]));

4) Write a TypeScript program that demonstrates the use of a union type where a variable can hold either a string or a number. 
// 4) Union type example
let userInput: string | number;
userInput = "Hello";
console.log("4) Union with string:", userInput);
userInput = 42;
console.log("   Union with number:", userInput);

5) Create an enum in TypeScript to represent different user roles (Admin, Editor, Viewer). and use this function in another file. Write a function that takes a role and prints a message based on the role. 
// 5) Enum and role-based function
export enum Role {
  Admin,
  Editor,
  Viewer,
}

export function printRoleMessage(role: Role): void {
  switch (role) {
    case Role.Admin:
      console.log("5) Welcome, Admin!");
      break;
    case Role.Editor:
      console.log("   You can edit content.");
      break;
    case Role.Viewer:
      console.log("   You can view content.");
      break;
  }
}

// Simulate calling from another file
printRoleMessage(Role.Editor);

6) . Create a TypeScript module that exports a function to calculate the area of a circle. Import
// 6) Area of Circle Module
export function areaOfCircle(radius: number): number {
  return Math.PI * radius * radius;
}

// Import simulation (would be from another file in real project)
import { areaOfCircle as importedArea } from "./assignment3";  // Replace with actual file/module if split
console.log("6) Area of circle with r=5:", importedArea(5));

7) Create a generic class Storage that can store and retrieve data of any type. Demonstrate its usage with number and string. 
// 7) Generic Storage Class
class Storage<T> {
  private data: T;

  constructor(value: T) {
    this.data = value;
  }

  get(): T {
    return this.data;
  }

  set(value: T): void {
    this.data = value;
  }
}
const numberStore = new Storage<number>(100);
console.log("7) Number storage:", numberStore.get());

const stringStore = new Storage<string>("Hello");
console.log("   String storage:", stringStore.get());

8) Write a TypeScript function that demonstrates the use of unknown type and safely performs operations using type assertions. 
// 8) Unknown type and type assertion
function handleUnknown(input: unknown) {
  if (typeof input === "string") {
    console.log("8) String length:", (input as string).length);
  } else if (typeof input === "number") {
    console.log("   Number squared:", (input as number) ** 2);
  } else {
    console.log("   Unknown type");
  }
}
handleUnknown("TypeScript");
handleUnknown(9);

9) Write a TypeScript function that takes a generic array and returns the first element of the array.
// 9) Generic function to return first element
function getFirstElement<T>(arr: T[]): T {
  return arr[0];
}
console.log("9) First element (number):", getFirstElement([10, 20, 30]));
console.log("   First element (string):", getFirstElement(["a", "b", "c"]));

Assignment 4: Assignment on Node.js 

1) On Modules Create a new module file named math.js that exports two functions: add and subtract. Implement each function to perform addition and subtraction of two numbers, respectively. Create a new file named app.js and import the math module. Use the add and subtract functions to perform arithmetic operations and display the results in the console 
Math.js=
exports.add = (a, b) => a + b;
exports.subtract = (a, b) => a - b;

app.js=
const readline = require('readline');
const math = require('./math');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

rl.question('Enter first number: ', (a) => {
  rl.question('Enter second number: ', (b) => {
    const num1 = parseFloat(a);
    const num2 = parseFloat(b);
    console.log(`Addition: ${math.add(num1, num2)}`);
    console.log(`Subtraction: ${math.subtract(num1, num2)}`);
    rl.close();
  });
});

2) On Callbacks Write an asynchronous function named delayedMessage that takes a callback function as an argument. Inside the function, use setTimeout to delay execution for two seconds, then invoke the callback function with the message "Delayed message". Call the delayedMessage function and provide a callback function to handle the delayed message. Display the received message in the console.
function delayedMessage(callback) {
  setTimeout(() => {
    callback("Delayed message");
  }, 2000);
}

delayedMessage((msg) => {
  console.log("Callback received:", msg);
}); 

3) On Event Handling Create an EventEmitter instance and define an event named greet. Implement a listener for the greet event that prints "Hello, Event!" to the console. Emit the greet event and observe the output in the console. 
const EventEmitter = require('events');
const emitter = new EventEmitter();

emitter.on('greet', () => {
  console.log("Hello, Event!");
});

emitter.emit('greet');

4) On Streams and Buffers Create a readable stream to read data from a text file named data.txt using the fs module. Implement event listeners for the data and end events of the stream. Display the received data and a message indicating the end of the stream in the console. 
Data.txt=
This is an example data file used for Node.js streams.
 Stream.js=
const fs = require('fs');

const stream = fs.createReadStream('data.txt', 'utf8');

stream.on('data', (chunk) => {
  console.log("Received chunk:\n", chunk);
});

stream.on('end', () => {
  console.log("End of file reached.");
});

5) On WebSockets Create a WebSocket server using the ws module. Define a callback function to handle client connections and implement event listeners for message reception and disconnection. Create a WebSocket client to connect to the server and send a message. Provide the code for establishing the connection and sending a message. Verify the communication between the WebSocket server and client by observing the messages exchanged in the console.
Server.js=
const WebSocket = require('ws');
const wss = new WebSocket.Server({ port: 8080 });

wss.on('connection', function connection(ws) {
  console.log("Client connected.");
  ws.on('message', function incoming(message) {
    console.log('Received:', message);
  });

  ws.on('close', () => {
    console.log("Client disconnected.");
  });

  ws.send('Hello from server!');
});

Client.js
const WebSocket = require('ws');
const readline = require('readline');

const ws = new WebSocket('ws://localhost:8080');
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

ws.on('open', () => {
  rl.question("Enter a message to send to server: ", (msg) => {
    ws.send(msg);
    rl.close();
  });
});

ws.on('message', (data) => {
  console.log("Received from server:", data.toString());
});

Assignment 5: Assignment on React.js. 

1. Write a program to create a simple calculator Application using React.js
import React, { useState } from 'react';

function Calculator() {
  const [num1, setNum1] = useState('');
  const [num2, setNum2] = useState('');
  const [result, setResult] = useState(null);

  const handleCalculation = (operation) => {
    const a = parseFloat(num1);
    const b = parseFloat(num2);
    if (isNaN(a) || isNaN(b)) {
      setResult("Please enter valid numbers");
      return;
    }
    switch (operation) {
      case 'add':
        setResult(a + b);
        break;
      case 'sub':
        setResult(a - b);
        break;
      case 'mul':
        setResult(a * b);
        break;
      case 'div':
        setResult(b !== 0 ? a / b : "Cannot divide by zero");
        break;
      default:
        setResult(null);
    }
  };

  return (
    <div style={{ padding: '20px' }}>
      <h2>Simple Calculator</h2>
      <input type="number" value={num1} onChange={(e) => setNum1(e.target.value)} placeholder="Enter first number" />
      <br /><br />
      <input type="number" value={num2} onChange={(e) => setNum2(e.target.value)} placeholder="Enter second number" />
      <br /><br />
      <button onClick={() => handleCalculation('add')}>Add</button>
      <button onClick={() => handleCalculation('sub')}>Subtract</button>
      <button onClick={() => handleCalculation('mul')}>Multiply</button>
      <button onClick={() => handleCalculation('div')}>Divide</button>
      <h3>Result: {result}</h3>
    </div>
  );
}

export default Calculator;


2. Create a Simple Login form using React.js
import React, { useState } from 'react';

function LoginForm() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [message, setMessage] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    if (username && password) {
      setMessage(`Welcome, ${username}!`);
    } else {
      setMessage("Please enter both username and password");
    }
  };

  return (
    <div style={{ padding: '20px' }}>
      <h2>Login Form</h2>
      <form onSubmit={handleSubmit}>
        <input type="text" placeholder="Username"
          value={username} onChange={(e) => setUsername(e.target.value)} />
        <br /><br />
        <input type="password" placeholder="Password"
          value={password} onChange={(e) => setPassword(e.target.value)} />
        <br /><br />
        <button type="submit">Login</button>
      </form>
      <h3>{message}</h3>
    </div>
  );
}

export default LoginForm;
